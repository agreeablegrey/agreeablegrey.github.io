{"version":3,"sources":["components/d3/AlyeskaContourMap.js","components/pages/contours-vis.js","App.js","index.js"],"names":["features","x","y","name","description","labels","rotation","label","range","begin","end","step","Array","array_size","Math","ceil","fill","map","num","i","createMap","ref","a","width","margin","top","right","bottom","left","height","svg","select","current","attr","data","elevationData","rows","cols","large_thresholds","small_thresholds","thresholds","concat","contours","d3","size","projection","fitWidth","g","append","path","hsvcolor","interpolateHsvLong","color","domain","zoomed","transform","threshold","contour","style","selectAll","enter","d","text","call","zoom","extent","scaleExtent","translateExtent","on","AlyeskaContourMap","svgRef","useRef","useEffect","ContoursVis","Container","className","border","App","fluid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1aa8a11.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport {select} from 'd3-selection';\nimport * as d3 from'd3';\nimport {interpolateHsvLong} from 'd3-hsv';\nimport {zoom} from 'd3-zoom';\n\nimport * as elevationData from '../../datasets/alyeska-elevation.json';\n\nconst features = [\n  {x: 128.5, y: 85.25, name: 'Baumann Bump', description: '1006m'},\n  {x: 148, y: 68.5, name: 'Mount Alyeska', description: '1200m'},\n  {x: 154.25, y: 89, name: 'Hibbs Peak', description: '1348m'},\n  {x: 107, y: 216.5, name: 'Pyramid Peak', description: '1002m'},\n  {x: 161.75, y: 149.75, name: 'Bramble Knoll', description: '988m'},\n  {x: 198, y: 93, name: 'HighBrush Peak', description: '1423m'},\n  {x: 210, y: 159, name: 'Blueberry Hill', description: '1275m'},\n  {x: 167.5, y: 37.5, name: 'Notch Mountain', description: '91m'},\n  {x: 52, y: 38, name: 'Gentoo Peak', description: '1278m'},\n  {x: 39.5, y: 70, name: 'Chinstrap Peak', description: '1102m'},\n  {x: 24.5, y: 84, name: 'Crested Peak', description: '1075m'},\n];\n\nconst labels = [\n  {x: 55, y: 140, rotation: 25, label: 'Turnagain Arm'},\n  {x: 90, y: 87, rotation: -55, label: 'Girdwood'},\n];\n\nconst range = (begin,end,step=1) => {\n  if (step > end) { return Array(); }\n  const array_size = Math.ceil((end - begin) / step);\n  return Array(array_size).fill(begin).map((num, i) => num + (i * step));\n}\n\nconst createMap = async(ref) => {\n  const margin = {top: 0, right: 0, bottom: 0, left: 0};\n  const svgWidth = 1000;\n  const svgHeight = 1300;\n  const width = svgWidth - margin.left - margin.right;\n  const height = svgHeight - margin.bottom - margin.top;\n  const svg = select(ref.current)\n    .attr('viewBox', '0 0 ' + width + ' ' + height )\n  \n  const data = elevationData.values\n  const rows = elevationData.rows\n  const cols = elevationData.cols\n\n  const large_thresholds = range(25,1575,50);\n  const small_thresholds = range(0,20,5);\n  const thresholds = small_thresholds.concat(large_thresholds);\n\n  const contours = d3.contours().size([cols, rows]);\n\n  const projection = d3.geoIdentity()\n    .fitWidth(width, contours(data)[0]);\n\n  const g = svg.append('g');\n\n  const path = d3.geoPath()\n    .projection(projection);\n  \n  let hsvcolor = interpolateHsvLong('#5e85b8', '#bd2202');\n  let color = d3.scaleSequential(hsvcolor).domain(d3.extent(data));\n\n  const zoomed = ({transform}) => {\n    g.attr('transform', transform);\n  }\n\n  for (const threshold of thresholds) {\n    g.append('path')\n      .attr('d', path(contours.contour(data, threshold)))\n      .attr('fill', color(threshold))\n      .attr('stroke', 'black')\n      .attr('stroke-width', 1)\n      .style('stroke-dasharray', () => {return (threshold < 20) ? ('3, 3') : null})\n  }\n\n  g.selectAll('circle')\n    .data(features)\n    .enter()\n    .append('circle')\n    .attr('cx', (d) => { return projection([d.x,d.y])[0]; })\n    .attr('cy', (d) => { return projection([d.x,d.y])[1]; })\n    .attr('r', '7px')\n    .attr('fill', 'red');\n\n  g.selectAll('text')\n    .data(labels)\n    .enter()\n    .append('text')\n    .attr('transform', (d) => {return `translate(${projection([d.x,d.y])[0]},${projection([d.x,d.y])[1]})rotate(${d.rotation})`})\n    .text((d) => { return d.label; });\n\n  svg.call(zoom()\n    .extent([[0, 0], [width, height]])\n    .scaleExtent([1, 3])\n    .translateExtent([[0, 0], [width, height]])\n    .on('zoom', zoomed));\n\n}\n\nconst AlyeskaContourMap = () => {\n  const svgRef = useRef();\n\n  useEffect(() => {\n    createMap(svgRef);\n  }, []);\n\n  return <svg ref={svgRef} />\n}\n\nexport default AlyeskaContourMap;","import React from 'react';\nimport AlyeskaContourMap from '../d3/AlyeskaContourMap';\nimport Container from 'react-bootstrap/Container';\n\nconst ContoursVis = () => {\n  return(\n    <Container>\n      <div className='row'>\n        <h1>Hello World!</h1>\n      </div>\n      <div className='row no-gutters'>\n        <div className=\"col\" style={{border: \"10px solid black\"}}>\n          <AlyeskaContourMap />\n        </div>\n      </div>\n      <div className='row'>\n        <h1>Goodbye World!</h1>\n      </div>\n    </Container>\n  );\n}\n\nexport default ContoursVis;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport ContoursVis from './components/pages/contours-vis'\n\nfunction App() {\n  return (\n    <Container fluid>\n      <ContoursVis />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}