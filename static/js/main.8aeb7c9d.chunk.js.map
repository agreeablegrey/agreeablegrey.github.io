{"version":3,"sources":["components/d3/AlyeskaContourMap.js","components/RadioButtons.js","components/pages/contours-vis.js","App.js","index.js"],"names":["features","x","y","name","description","labels","rotation","label","range","begin","end","step","Array","array_size","Math","ceil","fill","map","num","i","_alyeska_projection","getThresholds","contourSetting","large_thresholds","small_thresholds","concat","getContours","rows","elevationData","cols","d3","size","getData","getColorFunc","threshold","hsvcolor","interpolateHsvLong","domain","handleMouseOver","event","d","svg","tooltip","select","style","mouse","node","html","handleMouseOut","createMap","ref","a","width","margin","top","right","bottom","left","height","current","attr","data","thresholds","contours","color","fitWidth","g","append","path","projection","zoomed","transform","contour","selectAll","enter","on","text","call","zoom","extent","scaleExtent","translateExtent","AlyeskaContourMap","svgRef","useRef","useEffect","remove","updateContours","className","RadioButtonsVertical","onValueChange","checkedVal","radioButtons","radioVals","val","key","type","id","value","checked","onChange","htmlFor","ContoursVis","useState","radioValue","setRadioValue","Container","border","RadioButtons","target","App","fluid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8aeb7c9d.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport {select, selectAll} from 'd3-selection';\nimport * as d3 from'd3';\nimport {interpolateHsvLong} from 'd3-hsv';\nimport {zoom} from 'd3-zoom';\nimport '../../css/d3-styles.css'\nimport * as elevationData from '../../datasets/alyeska-elevation.json';\n\nconst features = [\n  {x: 128.5, y: 85.25, name: 'Baumann Bump', description: '1006m'},\n  {x: 148, y: 68.5, name: 'Mount Alyeska', description: '1200m'},\n  {x: 154.25, y: 89, name: 'Hibbs Peak', description: '1348m'},\n  {x: 107, y: 216.5, name: 'Pyramid Peak', description: '1002m'},\n  {x: 161.75, y: 149.75, name: 'Bramble Knoll', description: '988m'},\n  {x: 198, y: 93, name: 'HighBrush Peak', description: '1423m'},\n  {x: 210, y: 159, name: 'Blueberry Hill', description: '1275m'},\n  {x: 167.5, y: 37.5, name: 'Notch Mountain', description: '91m'},\n  {x: 52, y: 38, name: 'Gentoo Peak', description: '1278m'},\n  {x: 39.5, y: 70, name: 'Chinstrap Peak', description: '1102m'},\n  {x: 24.5, y: 84, name: 'Crested Peak', description: '1075m'},\n];\n\nconst labels = [\n  {x: 55, y: 140, rotation: 25, label: 'Turnagain Arm'},\n  {x: 92, y: 80, rotation: -55, label: 'Girdwood'},\n];\n\nconst range = (begin,end,step=1) => {\n  if (step > end) { return Array(); }\n  const array_size = Math.ceil((end - begin) / step);\n  return Array(array_size).fill(begin).map((num, i) => num + (i * step));\n}\n\nlet _alyeska_projection = null;\n\nconst getThresholds = (contourSetting) => {\n  const large_thresholds = range(25,1600,35);\n  const small_thresholds = range(0,25,5);\n\n  if (contourSetting === 'mixed') {\n    return small_thresholds.concat(large_thresholds);\n  }\n  else if (contourSetting === 'small') {\n    return small_thresholds;\n  }\n  else {\n    return large_thresholds;\n  }\n\n};\n\nconst getContours = () => {\n  const rows = elevationData.rows;\n  const cols = elevationData.cols;\n  return d3.contours().size([cols, rows]);\n};\n\nconst getData = () => {\n  return elevationData.values;\n};\n\nconst getColorFunc = (contourSetting) => {\n  const interpolateTerrain = (threshold) => {\n    const hsvcolor = interpolateHsvLong('#035406', '#ffe0db');\n    if (contourSetting === 'large') {\n      return hsvcolor(threshold);\n    }\n    else if (contourSetting === 'small') {\n      return threshold === 0 ? '#7da0ad' : threshold >= .01 ? '#ffffff' : hsvcolor(threshold);\n    }\n    else {\n      return threshold === 0 ? '#7da0ad' : hsvcolor(threshold);\n    }\n  };\n  return d3.scaleSequential(interpolateTerrain).domain(d3.extent(getData()));\n}; \n\nconst handleMouseOver = (event,d, svg) => {\n  const tooltip = select('.tooltip')\n    .style(\"opacity\", 0);\n  \n  const mouse = d3.pointer(event, svg.node());\n  tooltip.html(\n    `<p>${d.name} - ${d.description}</p>`\n  )\n  .style(\"left\", (mouse[0] + 25) + \"px\")\n  .style(\"top\", (mouse[1] - 10) + \"px\")\n  .style(\"opacity\", 0.9);\n};\n\nconst handleMouseOut = () => {\n  const tooltip = select('.tooltip')\n    .style(\"opacity\", 0);\n  \n  tooltip.style(\"opacity\", 0);\n}\n\nconst updateContours = (ref,contourSetting) => {\n  const thresholds = getThresholds(contourSetting);\n\n  const svg = select(ref.current);\n  const g = svg.select('g');\n  const path = d3.geoPath()\n    .projection(_alyeska_projection);\n  \n  const data = getData();\n  const contours = getContours();\n  const color = getColorFunc(contourSetting);\n\n  selectAll(\"path\").remove();\n  selectAll(\"circle\").remove();\n  selectAll(\"text\").remove();\n\n  for (const threshold of thresholds) {\n    g.append('path')\n      .attr('d', path(contours.contour(data, threshold)))\n      .attr('fill', color(threshold))\n      .attr('stroke', 'black')\n      .attr('stroke-width', 1)\n      .style('stroke-dasharray', () => {return (threshold < 20) ? ('3, 3') : null})\n  }\n\n  if (contourSetting !== 'small') {\n    g.selectAll('features')\n    .data(features)\n    .enter()\n    .append('circle')\n    .attr('cx', (d) => { return _alyeska_projection([d.x,d.y])[0]; })\n    .attr('cy', (d) => { return _alyeska_projection([d.x,d.y])[1]; })\n    .attr('r', '7px')\n    .attr('fill', 'red')\n    .on('mouseover', (event,d) => {handleMouseOver(event,d,svg)} )\n    .on('mouseout', handleMouseOut);\n  }\n\n  g.selectAll('text')\n    .data(labels)\n    .enter()\n    .append('text')\n    .attr('transform', (d) => {return `translate(${_alyeska_projection([d.x,d.y])[0]},${_alyeska_projection([d.x,d.y])[1]})rotate(${d.rotation})`})\n    .attr('letter-spacing', 3)\n    .text((d) => { return d.label; });\n\n};\n\nconst createMap = async(ref, contourSetting) => {\n  const margin = {top: 0, right: 0, bottom: 0, left: 0};\n  const svgWidth = 1000;\n  const svgHeight = 1300;\n  const width = svgWidth - margin.left - margin.right;\n  const height = svgHeight - margin.bottom - margin.top;\n  const svg = select(ref.current)\n    .attr('viewBox', '0 0 ' + width + ' ' + height );\n  \n  const data = getData();\n  const thresholds = getThresholds(contourSetting);\n  const contours = getContours();\n  const color = getColorFunc(contourSetting);\n\n  _alyeska_projection = d3.geoIdentity()\n    .fitWidth(width, contours(data)[0]);\n\n  const g = svg.append('g');\n\n  const path = d3.geoPath()\n    .projection(_alyeska_projection);\n\n  const zoomed = ({transform}) => {\n    g.attr('transform', transform);\n  }\n\n  for (const threshold of thresholds) {\n    g.append('path')\n      .attr('d', path(contours.contour(data, threshold)))\n      .attr('fill', color(threshold))\n      .attr('stroke', 'black')\n      .attr('stroke-width', 1)\n      .attr('class', `threshold-${threshold}`)\n      .style('stroke-dasharray', () => {return (threshold < 20) ? ('3, 3') : null})\n  }\n\n  g.selectAll('features')\n    .data(features)\n    .enter()\n    .append('circle')\n    .attr('cx', (d) => { return _alyeska_projection([d.x,d.y])[0]; })\n    .attr('cy', (d) => { return _alyeska_projection([d.x,d.y])[1]; })\n    .attr('r', '7px')\n    .attr('fill', 'red')\n    .on('mouseover', (event,d) => {handleMouseOver(event,d,svg)} )\n    .on('mouseout', handleMouseOut);\n\n  g.selectAll('text')\n    .data(labels)\n    .enter()\n    .append('text')\n    .attr('transform', (d) => {return `translate(${_alyeska_projection([d.x,d.y])[0]},${_alyeska_projection([d.x,d.y])[1]})rotate(${d.rotation})`})\n    .attr('letter-spacing', 3)\n    .text((d) => { return d.label; });\n\n  svg.call(zoom()\n    .extent([[0, 0], [width, height]])\n    .scaleExtent([1, 3])\n    .translateExtent([[0, 0], [width, height]])\n    .on('zoom', zoomed));\n\n}\n\nconst AlyeskaContourMap = ({contourSetting}) => {\n  const svgRef = useRef();\n\n  useEffect(() => {\n      updateContours(svgRef,contourSetting);\n  }, [contourSetting]);\n\n  useEffect(() => {\n    createMap(svgRef, contourSetting);\n  }, []);\n\n  return (\n    <div>\n      <div className='tooltip'></div>\n      <svg ref={svgRef} />\n    </div>\n    )\n}\n\nexport default AlyeskaContourMap;","import React from 'react';\n\nconst RadioButtonsVertical = ({onValueChange, checkedVal, radioVals}) => {\n    const radioButtons = radioVals.map((val) => {\n        return (\n            <div key={val}>\n                <input\n                    type=\"radio\"\n                    id={val}\n                    value={val}\n                    checked={checkedVal === val}\n                    onChange={onValueChange}\n                />\n                <label htmlFor={val}>{val}</label>\n            </div>\n        );\n    });\n\n    return (\n        <div>\n            {radioButtons}\n        </div>\n    )\n};\n\nexport default RadioButtonsVertical;","import React, {useState} from 'react';\nimport AlyeskaContourMap from '../d3/AlyeskaContourMap';\nimport Container from 'react-bootstrap/Container';\nimport RadioButtonsVertical from '../RadioButtons';\n\nconst ContoursVis = () => {\n  const contourRadioVals = [\n    'mixed',\n    'large',\n    'small'\n  ]\n\n  const [radioValue, setRadioValue] = useState('mixed');\n  const handleRadioChange = (event) => {\n    setRadioValue(event.target.value);\n  };\n\n  return(\n    <Container>\n      <div className='row no-gutters'>\n        <div className='col'>\n          <h1 className='text-center'>Alyeska Contour Map</h1>\n        </div>\n      </div>\n      <div className='row no-gutters'>\n        <div className='col' style={{border: '10px solid black'}}>\n          <AlyeskaContourMap contourSetting={radioValue}/>\n        </div>\n      </div>\n      <div className='row no-gutters' style={{border: '10px solid black'}} >\n        <div className='col'>\n            <p>Contours</p>\n            <RadioButtonsVertical onValueChange={handleRadioChange} checkedVal={radioValue} radioVals={contourRadioVals}/>\n        </div>\n      </div>\n      <div className='row'>\n        <div className='col'>\n            <p className='text-center mt-3'>An interactive contour map of Mount Alyeska and surrounding areas. Work in progress.</p>\n        </div>\n      </div>\n    </Container>\n  );\n}\n\nexport default ContoursVis;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport ContoursVis from './components/pages/contours-vis'\n\nfunction App() {\n  return (\n    <Container fluid>\n      <ContoursVis />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}