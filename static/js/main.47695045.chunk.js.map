{"version":3,"sources":["components/d3/AlyeskaContourMap.js","components/RadioButtons.js","components/pages/contours-vis.js","App.js","index.js"],"names":["features","x","y","name","description","humanFeatures","labels","rotation","label","range","begin","end","step","Array","array_size","Math","ceil","fill","map","num","i","_alyeska_projection","getThresholds","contourSetting","large_thresholds","small_thresholds","concat","getContours","rows","elevationData","cols","d3","size","getData","getColorFunc","threshold","hsvcolor","interpolateHsvLong","domain","handleMouseOver","event","d","svg","tooltip","select","style","mouse","node","html","attr","handleMouseOut","addFeatures","g","triangle","selectAll","data","enter","append","on","addElevationFeatures","addHumanFeatures","star","createMap","ref","a","width","margin","top","right","bottom","left","height","current","thresholds","contours","color","fitWidth","path","projection","zoomed","transform","contour","text","call","zoom","extent","scaleExtent","translateExtent","AlyeskaContourMap","svgRef","useRef","useEffect","remove","updateContours","className","RadioButtonsVertical","onValueChange","checkedVal","radioVals","radioLabels","radioButtons","val","key","type","id","value","checked","onChange","htmlFor","ContoursVis","contourRadioVals","values","useState","radioValue","setRadioValue","Container","border","RadioButtons","target","href","App","fluid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47695045.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport {select, selectAll} from 'd3-selection';\nimport * as d3 from'd3';\nimport {interpolateHsvLong} from 'd3-hsv';\nimport {zoom} from 'd3-zoom';\nimport '../../css/d3-styles.css'\nimport * as elevationData from '../../datasets/alyeska-elevation.json';\nimport { html, interval } from 'd3';\n\nconst features = [\n  {x: 128.5, y: 85.25, name: 'Baumann Bump', description: '1006m'},\n  {x: 148, y: 68.5, name: 'Mount Alyeska', description: '1200m'},\n  {x: 154.25, y: 89, name: 'Hibbs Peak', description: '1348m'},\n  {x: 107, y: 216.5, name: 'Pyramid Peak', description: '1002m'},\n  {x: 161.75, y: 149.75, name: 'Bramble Knoll', description: '988m'},\n  {x: 198, y: 93, name: 'HighBrush Peak', description: '1423m'},\n  {x: 167.5, y: 37.5, name: 'Notch Mountain', description: '941m'},\n  {x: 52, y: 38, name: 'Gentoo Peak', description: '1278m'},\n  {x: 39.5, y: 70, name: 'Chinstrap Peak', description: '1102m'},\n  {x: 24.5, y: 84, name: 'Crested Peak', description: '1075m'},\n];\n\nconst humanFeatures = [\n  {x: 92, y: 80,  name: 'Girdwood', description: 'Small community ~40 miles southeast of Anchorage'},\n  {x: 213, y: 253,  name: 'Portage', description: 'Town destroyed in 1964 Alaskan earthquake'},\n  {x: 215, y: 265,  name: 'Alaska Wildlife Conservation Center', description: 'Wildlife sanctuary'},\n\n];\n\nconst labels = [\n  {x: 55, y: 140, rotation: 25, label: 'Turnagain Arm'},\n];\n\nconst range = (begin,end,step=1) => {\n  if (step > end) { return Array(); }\n  const array_size = Math.ceil((end - begin) / step);\n  return Array(array_size).fill(begin).map((num, i) => num + (i * step));\n}\n\nlet _alyeska_projection = null;\nconst _svgWidth = 1000;\nconst _svgHeight = 1300;\nconst _intervalTypeSep = 25;\n\nconst getThresholds = (contourSetting) => {\n  const large_thresholds = range(_intervalTypeSep,1575,50);\n  const small_thresholds = range(0,_intervalTypeSep,5);\n\n  if (contourSetting === 'mixed') {\n    return small_thresholds.concat(large_thresholds);\n  }\n  else if (contourSetting === 'small') {\n    return small_thresholds;\n  }\n  else {\n    return large_thresholds;\n  }\n\n};\n\nconst getContours = () => {\n  const rows = elevationData.rows;\n  const cols = elevationData.cols;\n  return d3.contours().size([cols, rows]);\n};\n\nconst getData = () => {\n  return elevationData.values;\n};\n\nconst getColorFunc = (contourSetting) => {\n  const interpolateTerrain = (threshold) => {\n    const hsvcolor = interpolateHsvLong('#035406', '#ffe0db');\n    if (contourSetting === 'large') {\n      return hsvcolor(threshold);\n    }\n    else if (contourSetting === 'small') {\n      return threshold === 0 ? '#7da0ad' : threshold >= .01 ? '#8a8686' : hsvcolor(threshold);\n    }\n    else {\n      return threshold === 0 ? '#7da0ad' : hsvcolor(threshold);\n    }\n  };\n  return d3.scaleSequential(interpolateTerrain).domain(d3.extent(getData()));\n};\n\nconst handleMouseOver = (event,d, svg,threshold=-1) => {\n  const tooltip = select('.tooltip')\n    .style(\"opacity\", 0);\n  \n  const mouse = d3.pointer(event, svg.node());\n  let html = '';\n\n  if (threshold !== -1) {\n    html = `<p>${threshold}m`;\n    select(`.threshold-${threshold}`)\n      .attr('stroke', '#c70808')\n      .attr('stroke-width',3);\n\n  }\n  else {\n    html = `<p>${d.name} - ${d.description}</p>`;\n  }\n\n  tooltip.html(html)\n  .style(\"left\", (mouse[0] + 25) + \"px\")\n  .style(\"top\", (mouse[1] - 10) + \"px\")\n  .style(\"opacity\", 0.9);\n};\n\nconst handleMouseOut = (event,d,threshold=-1) => {\n  const tooltip = select('.tooltip')\n    .style(\"opacity\", 0);\n\n  if (threshold !== -1) {\n    select(`.threshold-${threshold}`)\n      .attr('stroke', 'black')\n      .attr('stroke-width',1);\n  }\n}\n\nconst updateContours = (ref,contourSetting) => {\n  const thresholds = getThresholds(contourSetting);\n\n  const svg = select(ref.current);\n  const g = svg.select('g');\n  const path = d3.geoPath()\n    .projection(_alyeska_projection);\n  \n  const data = getData();\n  const contours = getContours();\n  const color = getColorFunc(contourSetting);\n\n  selectAll(\"path\").remove();\n  selectAll(\"circle\").remove();\n  selectAll(\"text\").remove();\n\n  for (const threshold of thresholds) {\n    g.append('path')\n      .attr('d', path(contours.contour(data, threshold)))\n      .attr('fill', color(threshold))\n      .attr('stroke', 'black')\n      .attr('stroke-width', 1)\n      .style('stroke-dasharray', () => {return (threshold < _intervalTypeSep) ? ('3, 3') : null})\n      .attr('class', `threshold-${threshold}`)\n      .on('mouseover', (event,d) => {handleMouseOver(event,d,svg,threshold)})\n      .on('mouseout', (event,d) => { handleMouseOut(event,d,threshold)});\n  }\n\n  if (contourSetting !== 'small') {\n    addFeatures(svg,g);\n  }\n  else {\n    addHumanFeatures(svg,g);\n  }\n\n  g.selectAll('text')\n    .data(labels)\n    .enter()\n    .append('text')\n    .attr('transform', (d) => {return `translate(${_alyeska_projection([d.x,d.y])[0]},${_alyeska_projection([d.x,d.y])[1]})rotate(${d.rotation})`})\n    .attr('letter-spacing', 3)\n    .text((d) => { return d.label; });\n\n};\n\nconst addElevationFeatures = (svg,g) => {\n  const triangle = d3.symbol(d3.symbolTriangle, 100);\n\n  g.selectAll('features')\n    .data(features)\n    .enter()\n    .append('path')\n    .attr('d', triangle)\n    .attr('fill', 'red')\n    .attr('stroke', 'black')\n    .attr('stroke-width', 2)\n    .attr('transform', function(d) {\n      return `translate(${_alyeska_projection([d.x,d.y])[0]},${_alyeska_projection([d.x,d.y])[1]})`;\n    })\n    .on('mouseover', (event,d) => {handleMouseOver(event,d,svg)} )\n    .on('mouseout', handleMouseOut);\n};\n\nconst addFeatures = (svg,g) => {  \n    addElevationFeatures(svg,g)\n    addHumanFeatures(svg,g);\n};\n\nconst addHumanFeatures = (svg,g) => {\n\n  const star = d3.symbol(d3.symbolStar, 250);\n\n  g.selectAll('humanFeatures')\n  .data(humanFeatures)\n  .enter()\n  .append('path')\n  .attr('d', star)\n  .attr('fill', 'yellow')\n  .attr('stroke', 'black')\n  .attr('stroke-width', 2)\n  .attr('transform', function(d) {\n    return `translate(${_alyeska_projection([d.x,d.y])[0]},${_alyeska_projection([d.x,d.y])[1]})`;\n  })\n  .on('mouseover', (event,d) => {handleMouseOver(event,d,svg)} )\n  .on('mouseout', handleMouseOut);\n\n}\n\nconst createMap = async(ref, contourSetting) => {\n  const margin = {top: 0, right: 0, bottom: 0, left: 0};\n  const svgWidth = _svgWidth;\n  const svgHeight = _svgHeight;\n  const width = svgWidth - margin.left - margin.right;\n  const height = svgHeight - margin.bottom - margin.top;\n  const svg = select(ref.current)\n    .attr('viewBox', '0 0 ' + width + ' ' + height)\n    .attr('class','d3-svg');\n  \n  const data = getData();\n  const thresholds = getThresholds(contourSetting);\n  const contours = getContours();\n  const color = getColorFunc(contourSetting);\n\n  _alyeska_projection = d3.geoIdentity()\n    .fitWidth(width, contours(data)[0]);\n\n  const g = svg.append('g');\n\n  const path = d3.geoPath()\n    .projection(_alyeska_projection);\n\n  const zoomed = ({transform}) => {\n    g.attr('transform', transform);\n  }\n\n  for (const threshold of thresholds) {\n    g.append('path')\n      .attr('d', path(contours.contour(data, threshold)))\n      .attr('fill', color(threshold))\n      .attr('stroke', 'black')\n      .attr('stroke-width', 1)\n      .attr('class', `threshold-${threshold}`)\n      .style('stroke-dasharray', () => {return (threshold < _intervalTypeSep) ? ('3, 3') : null})\n      .on('mouseover', (event,d) => {handleMouseOver(event,d,svg,threshold)})\n      .on('mouseout', (event,d) => { handleMouseOut(event,d,threshold)});\n  }\n\n  addFeatures(svg,g);\n\n  g.selectAll('text')\n    .data(labels)\n    .enter()\n    .append('text')\n    .attr('transform', (d) => {return `translate(${_alyeska_projection([d.x,d.y])[0]},${_alyeska_projection([d.x,d.y])[1]})rotate(${d.rotation})`})\n    .attr('letter-spacing', 3)\n    .text((d) => { return d.label; });\n\n  svg.call(zoom()\n    .extent([[0, 0], [width, height]])\n    .scaleExtent([1, 3])\n    .translateExtent([[0, 0], [width, height]])\n    .on('zoom', zoomed));\n\n}\n\nconst AlyeskaContourMap = ({contourSetting}) => {\n  const svgRef = useRef();\n\n  useEffect(() => {\n      updateContours(svgRef,contourSetting);\n  }, [contourSetting]);\n\n  useEffect(() => {\n    createMap(svgRef, contourSetting);\n  }, []);\n\n  return (\n    <div>\n      <div className='tooltip'></div>\n      <svg ref={svgRef} />\n    </div>\n    )\n}\n\nexport default AlyeskaContourMap;","import React from 'react';\n\nconst RadioButtonsVertical = ({onValueChange, checkedVal, radioVals, radioLabels}) => {\n    const radioButtons = radioVals.map((val,i) => {\n        return (\n            <div key={val}>\n                <input\n                    type=\"radio\"\n                    id={val}\n                    value={val}\n                    checked={checkedVal === val}\n                    onChange={onValueChange}\n                />\n                <label htmlFor={val}>{radioLabels[i]}</label>\n            </div>\n        );\n    });\n\n    return (\n        <div>\n            {radioButtons}\n        </div>\n    )\n};\n\nexport default RadioButtonsVertical;","import React, {useState} from 'react';\nimport AlyeskaContourMap from '../d3/AlyeskaContourMap';\nimport Container from 'react-bootstrap/Container';\nimport RadioButtonsVertical from '../RadioButtons';\n\nconst ContoursVis = () => {\n  const contourRadioVals = {\n    values: [\n    'mixed',\n    'large',\n    'small'\n    ],\n    labels: [\n      'mixed - (combined large and small intervals)',\n      'large (25m - 1575m interval: 50m)',\n      'small (0m - 20m interval: 5m)'\n    ]\n  }\n\n  const [radioValue, setRadioValue] = useState('mixed');\n  const handleRadioChange = (event) => {\n    setRadioValue(event.target.value);\n  };\n\n  return(\n    <Container>\n      <div className='row no-gutters'>\n        <div className='col'>\n          <h1 className='text-center'>Alyeska Contour Map</h1>\n        </div>\n      </div>\n      <div className='row no-gutters'>\n        <div className='col' style={{border: '10px solid black'}}>\n          <AlyeskaContourMap contourSetting={radioValue}/>\n        </div>\n      </div>\n      <div className='row no-gutters' style={{border: '10px solid black'}} >\n        <div className='col'>\n            <p>Contour Interval</p>\n            <RadioButtonsVertical \n              onValueChange={handleRadioChange}\n              checkedVal={radioValue}\n              radioVals={contourRadioVals.values}\n              radioLabels={contourRadioVals.labels}\n            />\n        </div>\n      </div>\n      <div className='row'>\n        <div className='col'>\n            <p className='text-center mt-3'>An interactive contour map of Mount Alyeska and surrounding areas. Work in progress.</p>\n        </div>\n      </div>\n      <div className='row'>\n        <div className='col'>\n            <h2 className='text-center mt-3'>Approach</h2>\n            <p>\n              I wanted to try using the <a href=\"https://github.com/d3/d3-contour\">contour</a> API provided in D3.js.\n              From my visits to Alaska, I thought the area around Mount Alyeska would be interesting to represent on a contour map since \n              there is a big difference in elevation between the mud flats of Turnagain Arm and the surrounding Chugach Mountains.\n            </p>\n            <p>\n              I downloaded the Digital Terrain Model (DTM) IFSAR data available at <a href=\"https://elevation.alaska.gov/\">elevation.alaska.gov</a> for the area around Mount Alyeska.\n              Using the <a href=\"https://rasterio.readthedocs.io/en/latest/intro.html\">rasterio</a> Python library I converted the values in the DTM .tif file to JSON and downscaled the elevation data from each datapoint \n              representing an area of 5 meters to representing an area of 15 meters.\n            </p>\n        </div>\n      </div>\n    </Container>\n  );\n}\n\nexport default ContoursVis;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport ContoursVis from './components/pages/contours-vis'\n\nfunction App() {\n  return (\n    <Container fluid>\n      <ContoursVis />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}